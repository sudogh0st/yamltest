openapi: 3.0.3
info:
  title: emergepay
  version: 1.10.11
  description: |
    emergepay is a cloud-based API for running transactions.
servers:
  - url: https://api.emergepay-sandbox.chargeitpro.com
  - url: https://api.emergepay.chargeitpro.com
tags:
  - name: Start Transaction
    description: The entry point for all UI- or device-based transactions
  - name: Client-side
    description: Endpoints usable during a UI-based transaction
  - name: Device Support
    description: Endpoints usable during device-based transactions
  - name: Tokenized Transactions
    description: Endpoints available for running token-initiated transactions
  - name: Direct Post
    description: Endpoints available for running transactions with card data provided in the request body
  - name: Checkout
    description: Endpoint used to process transactions started with `submissionType` set to `manual`
  - name: Retrieve Transaction
    description: Endpoint available for retrieving the results of a transaction
  - name: Transaction Acknowledgement
    description: Endpoint available for acknowledging successful acquisition of transaction results
  - name: Digital Wallets
    description: Transactions run using data from digital wallets (Apple Pay, Google Pay)
  - name: Text to Pay
    description: Transactions run through a hosted payment page sent by sms

paths:
  /virtualterminal/v1/orgs/{oid}/transactions/start:
    post:
      security:
        - bearerAuth: []
      tags:
        - Start Transaction
      summary: Starts a new UI- or device-based transaction
      description: |
        The entry point into emergepay for transactions that take advantage of our UI
        or require a device.

        This endpoint currently supports transactions that get automatically processed by the UI, as well as
        transactions where processing is deferred until a separate request is made to the checkout endpoint (form fields only).

        The input to this endpoint will depend on which `submissionType` is chosen. The default is `automatic` if no value is supplied.
        If automatic submission is chosen, then this endpoint takes the `transactionType`, `method`, and populates supplied values
        which then become unchangeable (via the values supplied in `fields`).

        Secure fields such as card number, card expiration date, and card security code are not be accepted.

        See the applicable schema references for valid transaction types and field options.

        This endpoint can also be used to initialize device-based transactions when the `submissionType` is not `manual`.
        All of the same input fields are supported. To indicate that a transaction is a device-based transaction, the `device_name` field must be passed.

        When starting ACH transactions, all fields are accepted except for device-related fields and `billing_name`. Also for ACH transactions,
        when using the `hostedFields` integration method, the `check_number` and `account_type` are allowed fields in the start transaction request.
        These fields are not allowed in the start transaction request for the other integration methods for ACH transactions because
        they are collected in the UI.
      operationId: startTransaction
      parameters:
        - $ref: "#/components/parameters/oid"
      requestBody:
        description: |
          `external_tran_id` is required for all transaction types when `submissionType` is not `manual`.
          `transactionType` and `method` will be validated against what is allowed in the configuration
          set for this merchant.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartTransactionRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/transactionToken"
        "400":
          description: Invalid input format
        "401":
          description: The supplied credentials are not valid
        "500":
          description: Invalid merchant configuration for supplied oid
  /virtualterminal/v1/transactions/{transactionToken}:
    delete:
      tags:
        - Client-side
      summary: Cancels a transaction
      description: |
        Cancels the transaction associated with the supplied transaction token
      operationId: cancelTransaction
      parameters:
        - $ref: "#/components/parameters/transactionToken"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Cannot cancel device-based transactions from this endpoint
        "404":
          description: Transaction not found
  /device/v1/deviceTransactions/{transactionToken}:
    put:
      tags:
        - Device Support
      summary: Initiate the transaction on the device
      description: |
        Initiate the transaction on the device
      operationId: startDeviceTransaction
      parameters:
        - $ref: "#/components/parameters/transactionToken"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Missing transaction token
        "409":
          description: The transaction is not in a state at which the device can be initialized.
        "424":
          description: There was a problem finding or using the data set by the initial start transaction call. This could be caused by a missing device name.
        "500":
          description: An unexpected error occurred
    delete:
      tags:
        - Device Support
      summary: Cancel device transaction
      description: |
        Cancels the transaction initiated on the device.

        **Note**: This can only be called successfully when the device is still waiting for input and has not timed out.
      operationId: cancelDeviceTransaction
      parameters:
        - $ref: "#/components/parameters/transactionToken"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Missing transaction token
        "409":
          description: Unable to cancel transaction
    get:
      tags:
        - Device Support
      summary: Get device transaction results
      description: |
        Retrieves the results of a device-initiated transaction from the client-side.
        The recommended use case for this endpoint is strictly to confirm the state of
        the transaction and advance through the flow of your checkout process; It is recommended
        to use the authenticated retrieval endpoint or PostBack to get the results to save to a database.
      operationId: getDeviceResults
      parameters:
        - $ref: "#/components/parameters/transactionToken"
      responses:
        "200":
          $ref: "#/components/responses/success"
        "400":
          description: Missing transaction token
        "409":
          description: |
            * Transaction was not started
            * Transaction hasn't completed
  /device/v1/deviceTransactions/{transactionToken}/convertToKeyed:
    patch:
      tags:
        - Device Support
      summary: Convert to keyed entry
      description: |
        Attempt to convert an incomplete device-initiated transaction to a keyed transaction
        by cancelling the transaction on the device. If successful, the same `transactionToken`
        may be used to run a UI-based keyed transaction.
      operationId: convertToKeyed
      parameters:
        - $ref: "#/components/parameters/transactionToken"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Missing transaction token
        "409":
          description: Unable to convert to keyed. This may be because the transaction on the device could not be canceled.
  /virtualterminal/v1/orgs/{oid}/transactions/tokenizedPayment:
    put:
      security:
        - bearerAuth: []
      tags:
        - Tokenized Transactions
      summary: Tokenized payment
      description: |
        Run a payment transaction using tokenized card data
      operationId: runTokenizedPayment
      parameters:
        - $ref: "#/components/parameters/oid"
      requestBody:
        description: |
          `uniqueTransId`, `externalTransactionId`, and `amount` are all required
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenizedSaleRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/success"
        "400":
          description: Invalid input or input format
        "401":
          description: The supplied credentials are not valid
        "500":
          description: Missing token details for the supplied token
  /virtualterminal/v1/orgs/{oid}/transactions/tokenizedAuth:
    put:
      security:
        - bearerAuth: []
      tags:
        - Tokenized Transactions
      summary: Tokenized authorization
      description: |
        Run an authorization transaction using tokenized card data
      operationId: runTokenizedAuth
      parameters:
        - $ref: "#/components/parameters/oid"
      requestBody:
        description: |
          `uniqueTransId`, `externalTransactionId`, and `amount` are all required
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenizedAuthRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/success"
        "400":
          description: Invalid input or input format
        "401":
          description: The supplied credentials are not valid
        "500":
          description: Missing token details for the supplied token
  /virtualterminal/v1/orgs/{oid}/transactions/tokenizedRefund:
    put:
      security:
        - bearerAuth: []
      tags:
        - Tokenized Transactions
      summary: Tokenized refund
      description: |
        Run a refund transaction using tokenized card data
      operationId: runTokenizedRefund
      parameters:
        - $ref: "#/components/parameters/oid"
      requestBody:
        description: |
          `uniqueTransId`, `externalTransactionId`, and `amount` are all required
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenizedRefundRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/success"
        "400":
          description: Invalid input or input format
        "401":
          description: The supplied credentials are not valid
        "500":
          description: Missing token details for the supplied token
  /virtualterminal/v1/orgs/{oid}/transactions/tokenizedForce:
    put:
      security:
        - bearerAuth: []
      tags:
        - Tokenized Transactions
      summary: Tokenized force
      description: |
        Force an authorization transaction
      operationId: runTokenizedForce
      parameters:
        - $ref: "#/components/parameters/oid"
      requestBody:
        description: |
          `uniqueTransId` and `externalTransactionId` are required.
          The `amount` and `tipAmount` from the authorization
          transaction record will be used for this request if
          new values are not supplied
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForceRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/success"
        "400":
          description: |
            * Invalid input or input format
            * Original transaction was not an authorization
            * Original transaction was not approved
            * Transaction has already been voided
            * Transaction has already been forced
        "401":
          description: The supplied credentials are not valid
        "404":
          description: Original transaction was not found
        "500":
          description: An unexpected error occurred
  /virtualterminal/v1/orgs/{oid}/transactions/void:
    put:
      security:
        - bearerAuth: []
      tags:
        - Tokenized Transactions
      summary: Void a transaction
      description: |
        Void a transaction that's already been approved
      operationId: runVoid
      parameters:
        - $ref: "#/components/parameters/oid"
      requestBody:
        description: |
          `uniqueTransId` and `externalTransactionId` are required
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VoidRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/success"
        "400":
          description: |
            * Invalid input format
            * Original transaction was not approved
            * Transaction has already been voided
        "401":
          description: The supplied credentials are not valid
        "404":
          description: Original transaction was not found
        "500":
          description: An unexpected error occurred
  /virtualterminal/v1/orgs/{oid}/transactions/adjust:
    put:
      security:
        - bearerAuth: []
      tags:
        - Tokenized Transactions
      summary: Adjust the amount of a sale or authorization
      description: |
        Adjust the `amount` and/or `tipAmount` of a previously approved sale or authorization
      operationId: runAdjust
      parameters:
        - $ref: "#/components/parameters/oid"
      requestBody:
        description: |
          `uniqueTransId`, `externalTransactionId`, and `adjustmentType` are required.
          `amount` and/or `tipAmount` requirements are dependent on the value of `adjustmentType`.


           **Note:** The value of `adjustmentType` determines which amount can be adjusted.

           ***AuthAdjust*** - `amount` and `tipAmount` can be adjusted. At least one of the two is required.

           ***SaleAdjust*** - Only `tipAmount` is required and can be adjusted.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdjustRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/success"
        "400":
          description: |
            * Invalid input format
            * Original transaction was not approved
            * Transaction has already been voided
            * Transaction has already been forced
            * Adjustment not applicable for original transaction type
        "401":
          description: The supplied credentials are not valid for the supplied oid.
        "404":
          description: Original transaction was not found
        "500":
          description: An unexpected error occurred
  /virtualterminal/v1/orgs/{oid}/transactions/sale:
    put:
      tags:
        - Direct Post
      summary: Run a sale transaction
      description: |
        Run a sale transaction with the supplied card details
      operationId: runSale
      parameters:
        - $ref: "#/components/parameters/oid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DirectPostSaleRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/success"
        "400":
          description: |
            * Invalid input or input format
            * Direct post is not enabled for the oid supplied
        "500":
          description: An unexpected error occurred
  /virtualterminal/v1/orgs/{oid}/transactions/authorization:
    put:
      tags:
        - Direct Post
      summary: Run an authorization transaction
      description: |
        Run an authorization transaction with the supplied card details
      operationId: runAuth
      parameters:
        - $ref: "#/components/parameters/oid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DirectPostAuthRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/success"
        "400":
          description: |
            * Invalid input or input format
            * Direct post is not enabled for the oid supplied
        "500":
          description: An unexpected error occurred
  /virtualterminal/v1/orgs/{oid}/transactions/refund:
    put:
      tags:
        - Direct Post
      summary: Run a refund transaction
      description: |
        Run a refund transaction with the supplied card details
      operationId: runRefund
      parameters:
        - $ref: "#/components/parameters/oid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DirectPostRefundRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/success"
        "400":
          description: |
            * Invalid input or input format
            * Direct post is not enabled for the oid supplied
        "500":
          description: An unexpected error occurred
  /virtualterminal/v1/orgs/{oid}/transactions/tokenize:
    put:
      tags:
        - Direct Post
      summary: Tokenize a card
      description: |
        Tokenize a card with the supplied card details
      operationId: runTokenizeAccount
      parameters:
        - $ref: "#/components/parameters/oid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DirectPostTokenizeRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/success"
        "400":
          description: |
            * Invalid input or input format
            * Direct post is not enabled for the oid supplied
        "500":
          description: An unexpected error occurred
  /virtualterminal/v1/orgs/{oid}/transactions/ach/sale:
    put:
      tags:
        - Direct Post
      summary: Run an ACH sale transaction
      description: |
        Run an ACH sale transaction with the supplied bank account details
      operationId: runAchSale
      parameters:
        - $ref: "#/components/parameters/oid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DirectPostAchRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/success"
        "400":
          description: |
            * Invalid input or input format
            * Direct post is not enabled for the oid supplied
        "500":
          description: An unexpected error occurred
  /virtualterminal/v1/orgs/{oid}/transactions/ach/refund:
    put:
      tags:
        - Direct Post
      summary: Run an ACH refund transaction
      description: |
        Run an ACH refund transaction with the supplied bank account details
      operationId: runAchRefund
      parameters:
        - $ref: "#/components/parameters/oid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DirectPostAchRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/success"
        "400":
          description: |
            * Invalid input or input format
            * Direct post is not enabled for the oid supplied
        "500":
          description: An unexpected error occurred
  /virtualterminal/v1/orgs/{oid}/transactions/ach/tokenize:
    put:
      tags:
        - Direct Post
      summary: Tokenize a bank account
      description: |
        Tokenize a bank account with the supplied bank account details
      operationId: runAchTokenizeAccount
      parameters:
        - $ref: "#/components/parameters/oid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DirectPostAchTokenizeRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/success"
        "400":
          description: |
            * Invalid input or input format
            * Direct post is not enabled for the oid supplied
        "500":
          description: An unexpected error occurred
  /virtualterminal/v1/orgs/{oid}/transactions/checkout/{transactionToken}:
    put:
      tags:
        - Checkout
      summary: Run a checkout transaction
      description: |
        Process a checkout transaction. This endpoint will merge the input
        supplied with the sensitive customer data captured in the UI and run the
        transaction based on the transaction type supplied in the initial
        start transaction request.
      operationId: runCheckoutTransaction
      parameters:
        - $ref: "#/components/parameters/oid"
        - $ref: "#/components/parameters/transactionToken"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/success"
        "400":
          description: Invalid input or input format
        "500":
          description: An unexpected error occurred
  /virtualterminal/v1/orgs/{oid}/transactions/{externalTransactionId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Retrieve Transaction
      summary: Look up results for a transaction
      description: |
        Attempt to look up the results for a transaction
      operationId: retrieveTransaction
      parameters:
        - $ref: "#/components/parameters/oid"
        - $ref: "#/components/parameters/externalTransactionId"
      responses:
        "200":
          $ref: "#/components/responses/success"
        "401":
          description: The supplied credentials are not valid
        "404":
          description: Transaction not found
        "429":
          description: Rate limit exceeded
  ? /virtualterminal/v1/orgs/{oid}/transactions/acknowledgements/{externalTransactionId}
  : put:
      security:
        - bearerAuth: []
      tags:
        - Transaction Acknowledgement
      summary: Acknowledge receipt of transaction results
      description: |
        Acknowledge successful receipt of transaction results
      operationId: acknowledgeResponse
      parameters:
        - $ref: "#/components/parameters/oid"
        - $ref: "#/components/parameters/externalTransactionId"
      responses:
        "200":
          description: Successful operation
        "500":
          description: An unexpected error occurred
  /virtualterminal/v1/orgs/{oid}/transactions/wallets:
    post:
      security:
        - bearerAuth: []
      tags:
        - Digital Wallets
      summary: Run a transaction with the supplied digital wallets information
      description: |
        Process a digital wallets transaction according to the transaction type supplied
      operationId: digitalWallets
      parameters:
        - $ref: "#/components/parameters/oid"
      requestBody:
        description: |
          The request body should be sent as `transactionData` exactly as it was received from the client-side sdk.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DigitalWalletsRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/success"
        "400":
          description: Invalid input or input format
        "401":
          description: The supplied credentials are not valid
        "500":
          description: An unexpected error occurred
  /virtualterminal/v1/orgs/{oid}/paymentpages:
    post:
      security:
        - bearerAuth: []
      tags:
        - Text to Pay
      summary: Start a Text to Pay transaction
      description: |
        Start a Text to Pay transaction session and create an associated payment page
      operationId: createPaymentPage
      parameters:
        - $ref: "#/components/parameters/oid"
      requestBody:
        description: |
          The request body should be sent as `transactionData`.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartTextToPayRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/createPaymentPage"
        "400":
          description: Invalid input or input format
        "401":
          description: The supplied credentials are not valid
        "500":
          description: An unexpected error occurred
  /virtualterminal/v1/orgs/{oid}/paymentpages/{paymentPageId}/text:
    post:
      security:
        - bearerAuth: []
      tags:
        - Text to Pay
      summary: Text a payment page
      description: |
        Send a payment page via sms
      operationId: textPaymentPage
      parameters:
        - $ref: "#/components/parameters/oid"
        - $ref: "#/components/parameters/paymentPageId"
      requestBody:
        description: |
          The request body for sending a text.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendTextPayRequestBody"
      responses:
        "202":
          $ref: "#/components/responses/textPaymentPage"
        "400":
          description: Invalid input or input format
        "401":
          description: The supplied credentials are not valid
        "429":
          description: Rate limit exceeded
        "500":
          description: An unexpected error occurred
  /virtualterminal/v1/orgs/{oid}/paymentpages/{paymentPageId}:
    delete:
      security:
        - bearerAuth: []
      tags:
        - Text to Pay
      summary: Cancel a Text to Pay transaction
      description: |
        Cancel a pending Text to Pay transaction and optionally send an sms notificaiton
      operationId: cancelPaymentPage
      parameters:
        - $ref: "#/components/parameters/oid"
        - $ref: "#/components/parameters/paymentPageId"
      requestBody:
        description: |
          The request body for canceling a Text to Pay transaction.
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendTextPayRequestBody"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input or input format
        "401":
          description: The supplied credentials are not valid
        "500":
          description: An unexpected error occurred
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    oid:
      name: oid
      in: path
      description: Merchant identifier
      required: true
      schema:
        type: string
    transactionToken:
      name: transactionToken
      in: path
      description: Transaction identifier
      required: true
      schema:
        type: string
    externalTransactionId:
      name: externalTransactionId
      in: path
      description: Merchant's transaction identifier
      required: true
      schema:
        type: string
    paymentPageId:
      name: paymentPageId
      in: path
      description: Payment page identifier
      required: true
      schema:
        type: string
  schemas:
    StartTransactionRequestBody:
      type: object
      properties:
        transactionData:
          oneOf:
            - $ref: "#/components/schemas/StartTransactionData"
            - $ref: "#/components/schemas/StartCheckoutTransactionData"
      required:
        - transactionData
    StartTransactionData:
      type: object
      properties:
        transactionType:
          type: string
          enum:
            - CreditSale
            - CreditAuth
            - CreditReturn
            - CreditSaveCard
            - AchSale
            - AchReturn
            - AchSaveAccount
            - RequestSignature
        method:
          type: string
          enum:
            - hostedFields
            - modal
            - urlPage
        submissionType:
          type: string
          enum:
            - automatic
        fields:
          type: array
          items:
            anyOf:
              - $ref: "#/components/schemas/Field"
              - $ref: "#/components/schemas/ConfirmationTextField"
              - $ref: "#/components/schemas/FundingSplitsWithField"
      required:
        - transactionType
        - method
        - fields
    StartCheckoutTransactionData:
      type: object
      properties:
        transactionType:
          type: string
          enum:
            - CreditSale
            - CreditAuth
            - CreditReturn
            - CreditSaveCard
            - AchSale
            - AchReturn
            - AchSaveAccount
        method:
          type: string
          enum:
            - hostedFields
        submissionType:
          type: string
          enum:
            - manual
      required:
        - transactionType
        - method
        - submissionType
    Field:
      type: object
      properties:
        id:
          type: string
          maxLength: 50
          enum:
            - base_amount
            - tip_amount
            - external_tran_id
            - billing_name
            - billing_address
            - billing_postal_code
            - transaction_reference
            - cashier_id
            - device_name
            - signature_capture
            - signature_required
            - prompt_tip
            - check_number
            - account_type
            - confirmation_text
            - level2.tax_amount
            - level2.is_tax_exempt
            - level2.purchase_id
            - level2.purchase_order_number
            - level2.customer_tax_id
            - level2.destination_postal_code
            - level2.product_description
        value:
          type: string
    ConfirmationTextField:
      description: Only applicable when `transactionType` is set to `RequestSignature`
      properties:
        id:
          type: string
          enum:
            - confirmation_text
        value:
          type: string
          pattern: ^(?!([{:\\[])).*
          maxLength: 100000
    FundingSplitsWithField:
      description: Only applicable when `transactionType` is set to `CreditSale`, `CreditReturn`, or `CreditForce`
      properties:
        id:
          type: string
          enum:
            - funding.splits_with
        value:
          type: array
          items:
            $ref: "#/components/schemas/FundingSplitsWithObject"
    OriginField:
      type: string
      pattern: ^[a-zA-Z\\ \\.\\_\\-\\'\\d]{1,65}$
    CheckoutRequestBody:
      description: |
        The request body uses `accountData` for `CreditSaveCard` and `AchSaveAccount`
        transactions and `transactionData` for all other supported transaction types.
      type: object
      oneOf:
        - type: object
          properties:
            transactionData:
              oneOf:
                - $ref: "#/components/schemas/CheckoutSaleTransactionData"
                - $ref: "#/components/schemas/CheckoutRefundTransactionData"
                - $ref: "#/components/schemas/CheckoutAchTransactionData"
        - type: object
          properties:
            accountData:
              oneOf:
                - $ref: "#/components/schemas/CheckoutData"
                - $ref: "#/components/schemas/CheckoutAchSaveAccountData"
    CheckoutAchData:
      type: object
      properties:
        externalTransactionId:
          type: string
        billingAddress:
          type: string
        billingPostalCode:
          type: string
        cashierId:
          type: string
        transactionReference:
          type: string
        origin:
          $ref: "#/components/schemas/OriginField"
      required:
        - externalTransactionId
    CheckoutData:
      type: object
      allOf:
        - $ref: "#/components/schemas/CheckoutAchData"
        - type: object
          properties:
            billingName:
              type: string
    CheckoutAchSaveAccountData:
      type: object
      allOf:
        - $ref: "#/components/schemas/CheckoutAchData"
        - type: object
          properties:
            accountType:
              type: string
              enum:
                - Checking
                - Savings
    CheckoutSaleTransactionData:
      type: object
      allOf:
        - $ref: "#/components/schemas/CheckoutData"
        - type: object
          properties:
            amount:
              type: string
            tipAmount:
              type: string
            taxAmount:
              type: string
            level2:
              $ref: "#/components/schemas/Level2"
            funding:
              $ref: "#/components/schemas/Funding"
          required:
            - amount
    CheckoutRefundTransactionData:
      type: object
      allOf:
        - $ref: "#/components/schemas/CheckoutData"
        - type: object
          properties:
            amount:
              type: string
            funding:
              $ref: "#/components/schemas/Funding"
          required:
            - amount
    CheckoutAchTransactionData:
      type: object
      allOf:
        - $ref: "#/components/schemas/CheckoutAchSaveAccountData"
        - type: object
          properties:
            checkNumber:
              type: string
            amount:
              type: string
          required:
            - amount
    VoidRequestBody:
      type: object
      properties:
        transactionData:
          type: object
          properties:
            uniqueTransId:
              type: string
            externalTransactionId:
              type: string
            cashierId:
              type: string
            origin:
              $ref: "#/components/schemas/OriginField"
          required:
            - uniqueTransId
            - externalTransactionId
    AdjustRequestBody:
      type: object
      properties:
        transactionData:
          type: object
          properties:
            adjustmentType:
              type: string
              enum:
                - SaleAdjust
                - AuthAdjust
            uniqueTransId:
              type: string
            externalTransactionId:
              type: string
            amount:
              description: only valid when `adjustmentType` is `AuthAdjust`
              type: string
            tipAmount:
              description: optional when `adjustmentType` is `AuthAdjust`, but required when `adjustmentType` is `SaleAdjust`
              type: string
            cashierId:
              type: string
            transactionReference:
              type: string
            origin:
              $ref: "#/components/schemas/OriginField"
          required:
            - uniqueTransId
            - externalTransactionId
            - adjustmentType
    DirectPostSaleRequestBody:
      type: object
      properties:
        transactionData:
          allOf:
            - type: object
              properties:
                amount:
                  type: string
                tipAmount:
                  type: string
                taxAmount:
                  type: string
              required:
                - amount
            - $ref: "#/components/schemas/DirectPostData"
            - type: object
              properties:
                level2:
                  $ref: "#/components/schemas/Level2"
                funding:
                  $ref: "#/components/schemas/Funding"
      required:
        - transactionData
    DirectPostAuthRequestBody:
      type: object
      properties:
        transactionData:
          allOf:
            - type: object
              properties:
                amount:
                  type: string
                tipAmount:
                  type: string
                taxAmount:
                  type: string
              required:
                - amount
            - $ref: "#/components/schemas/DirectPostData"
            - type: object
              properties:
                level2:
                  $ref: "#/components/schemas/Level2"
      required:
        - transactionData
    DirectPostRefundRequestBody:
      type: object
      properties:
        transactionData:
          allOf:
            - type: object
              properties:
                amount:
                  type: string
              required:
                - amount
            - $ref: "#/components/schemas/DirectPostData"
            - type: object
              properties:
                funding:
                  $ref: "#/components/schemas/Funding"
      required:
        - transactionData
    DirectPostTokenizeRequestBody:
      type: object
      properties:
        accountData:
          $ref: "#/components/schemas/DirectPostData"
      required:
        - accountData
    DirectPostAchRequestBody:
      type: object
      properties:
        transactionData:
          allOf:
            - type: object
              properties:
                amount:
                  type: string
                checkNumber:
                  type: string
              required:
                - amount
            - $ref: "#/components/schemas/DirectPostAchData"
      required:
        - transactionData
    DirectPostAchTokenizeRequestBody:
      type: object
      properties:
        accountData:
          $ref: "#/components/schemas/DirectPostAchData"
      required:
        - accountData
    DirectPostData:
      type: object
      properties:
        cardNumber:
          type: string
        cardExpirationDate:
          type: string
        cardSecurityCode:
          type: string
        externalTransactionId:
          type: string
        billingName:
          type: string
        billingAddress:
          type: string
        billingPostalCode:
          type: string
        cashierId:
          type: string
        transactionReference:
          type: string
        origin:
          $ref: "#/components/schemas/OriginField"
      required:
        - cardNumber
        - cardExpirationDate
        - externalTransactionId
    DirectPostAchData:
      type: object
      properties:
        accountHolderName:
          type: string
        routingNumber:
          type: string
        accountNumber:
          type: string
        externalTransactionId:
          type: string
        billingAddress:
          type: string
        billingPostalCode:
          type: string
        cashierId:
          type: string
        transactionReference:
          type: string
        origin:
          $ref: "#/components/schemas/OriginField"
        accountType:
          type: string
          enum:
            - Checking
            - Savings
      required:
        - accountHolderName
        - routingNumber
        - accountNumber
        - externalTransactionId
    TokenizedSaleRequestBody:
      type: object
      properties:
        transactionData:
          allOf:
            - $ref: "#/components/schemas/TokenizedTransactionData"
            - type: object
              properties:
                tipAmount:
                  type: string
                taxAmount:
                  type: string
                level2:
                  $ref: "#/components/schemas/Level2"
                funding:
                  $ref: "#/components/schemas/Funding"
      required:
        - transactionData
    TokenizedAuthRequestBody:
      type: object
      properties:
        transactionData:
          allOf:
            - $ref: "#/components/schemas/TokenizedTransactionData"
            - type: object
              properties:
                tipAmount:
                  type: string
                taxAmount:
                  type: string
                level2:
                  $ref: "#/components/schemas/Level2"
      required:
        - transactionData
    TokenizedRefundRequestBody:
      type: object
      properties:
        transactionData:
          allOf:
            - $ref: "#/components/schemas/TokenizedTransactionData"
            - type: object
              properties:
                funding:
                  $ref: "#/components/schemas/Funding"
      required:
        - transactionData
    TokenizedTransactionData:
      type: object
      properties:
        amount:
          type: string
        externalTransactionId:
          type: string
        uniqueTransId:
          type: string
        billingName:
          type: string
        billingAddress:
          type: string
        billingPostalCode:
          type: string
        cashierId:
          type: string
        transactionReference:
          type: string
        origin:
          $ref: "#/components/schemas/OriginField"
      required:
        - amount
        - externalTransactionId
        - uniqueTransId
    ForceRequestBody:
      type: object
      properties:
        transactionData:
          type: object
          properties:
            amount:
              type: string
            tipAmount:
              type: string
            taxAmount:
              type: string
            externalTransactionId:
              type: string
            uniqueTransId:
              type: string
            cashierId:
              type: string
            transactionReference:
              type: string
            origin:
              $ref: "#/components/schemas/OriginField"
            funding:
              $ref: "#/components/schemas/Funding"
          required:
            - externalTransactionId
            - uniqueTransId
      required:
        - transactionData
    DigitalWalletsRequestBody:
      type: object
      properties:
        transactionData:
          type: object
          properties:
            amount:
              type: string
            transactionType:
              type: string
              enum:
                - CreditSale
                - CreditAuth
                - CreditReturn
            externalTransactionId:
              type: string
            cashierId:
              type: string
            transactionReference:
              type: string
            type:
              type: string
              enum:
                - applePay
                - googlePay
            billing:
              $ref: "#/components/schemas/DigitalWalletsAddress"
            shipping:
              allOf:
                - $ref: "#/components/schemas/DigitalWalletsAddress"
                - type: object
                  properties:
                    method:
                      type: object
                      properties:
                        id:
                          type: string
                        label:
                          type: string
                        description:
                          type: string
                        amount:
                          type: string
                    email:
                      type: string
                    phoneNumber:
                      type: string
            paymentData:
              type: object
              properties:
                cardDetails:
                  type: object
                  properties:
                    description:
                      type: string
                    network:
                      type: string
                    type:
                      type: string
                tokenDetails:
                  type: object
                  properties:
                    token:
                      type: string
                    version:
                      type: string
                    signature:
                      type: string
                    header:
                      type: object
                      properties:
                        ephemeralPublicKey:
                          type: string
                        publicKeyHash:
                          type: string
                        transactionId:
                          type: string
                        applicationData:
                          type: string
                      required:
                        - ephemeralPublicKey
                        - publicKeyHash
                        - transactionId
                  required:
                    - token
              required:
                - tokenDetails
          required:
            - amount
            - externalTransactionId
            - type
            - paymentData
      required:
        - transactionData
    DigitalWalletsAddress:
      type: object
      properties:
        addressLines:
          type: array
          items:
            type: string
        administrativeArea:
          type: string
        countryCode:
          type: string
        locality:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        postalCode:
          type: string
    StartTextToPayRequestBody:
      type: object
      properties:
        transactionData:
          type: object
          properties:
            amount:
              type: string
            billingName:
              type: string
            billingAddress:
              type: string
            billingPostalCode:
              type: string
            cashierId:
              type: string
            externalTransactionId:
              type: string
            level2:
              $ref: "#/components/schemas/Level2"
            origin:
              $ref: "#/components/schemas/OriginField"
            pageExpiration:
              type: string
            pageDescription:
              type: string
            taxAmount:
              type: string
            transactionReference:
              type: string
          required:
            - amount
            - externalTransactionId
      required:
        - transactionData
    SendTextPayRequestBody:
      type: object
      properties:
        to:
          type: string
        message:
          type: string
      required:
        - to
        - message
    CancelTextToPayRequestBody:
      type: object
      properties:
        sendText:
          type: boolean
        message:
          type: string
    Level2:
      type: object
      properties:
        isTaxExempt:
          type: boolean
        purchaseId:
          type: string
        purchaseOrderNumber:
          type: string
        customerTaxId:
          type: string
        destinationPostalCode:
          type: string
        productDescription:
          type: string
      required:
        - purchaseId
        - purchaseOrderNumber
    Funding:
      type: object
      properties:
        splitsWith:
          type: array
          items:
            $ref: "#/components/schemas/FundingSplitsWithObject"
      required:
        - splitsWith
    FundingSplitsWithObject:
      type: object
      properties:
        oid:
          type: string
        amount:
          type: string
      required:
        - oid
        - amount
    Error:
      type: object
      properties:
        code:
          type: string
        target:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            $ref: "#/components/schemas/Error"
  responses:
    transactionToken:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              transactionToken:
                type: string
    success:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              transactionResponse:
                properties:
                  uniqueTransId:
                    type: string
                  batchNumber:
                    type: string
                  resultMessage:
                    type: string
                  resultStatus:
                    type: string
                  approvalNumberResult:
                    type: string
                  amountProcessed:
                    type: string
                  amount:
                    type: string
                  amountTaxed:
                    type: string
                  amountTipped:
                    type: string
                  amountBalance:
                    type: string
                  transactionReference:
                    type: string
                  avsResponseCode:
                    type: string
                  avsResponseText:
                    type: string
                  cvvResponseCode:
                    type: string
                  cvvResponseText:
                    type: string
                  accountCardType:
                    type: string
                  accountExpiryDate:
                    type: string
                  transactionType:
                    type: string
                  billingName:
                    type: string
                  maskedAccount:
                    type: string
                  accountEntryMethod:
                    type: string
                  externalTransactionId:
                    type: string
                  cashier:
                    type: string
                  emv:
                    type: object
                    properties:
                      aid:
                        type: string
                  signature:
                    type: string
                  level2:
                    $ref: "#/components/schemas/Level2"
                  isPartialApproval:
                    type: boolean
                  createdOn:
                    type: string
    createPaymentPage:
      description: Payment page response
      content:
        application/json:
          schema:
            type: object
            properties:
              paymentPageId:
                type: string
              paymentPageUrl:
                type: string
    textPaymentPage:
      description: Text payment page response
      content:
        application/json:
          schema:
            type: object
            properties:
              textMessageResponse:
                type: object
                properties:
                  status:
                    type: string
                  from:
                    type: string
                  to:
                    type: string
